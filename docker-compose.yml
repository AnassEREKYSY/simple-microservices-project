version: '3'

services:
  frontend:
    build:
      context: ./frontend
    ports:
      - "8080:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  backend:
    build:
      context: ./backend
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    volumes:
      - ./database:/app/database
    environment:
      - DB_HOST=database
      - DB_USER=your-user
      - DB_PASSWORD=your-password
      - DB_NAME=your-db
    depends_on:
      - database
    networks:
      - backend-network

  database:
    image: postgres:latest
    environment:
      POSTGRES_USER: your-user
      POSTGRES_PASSWORD: your-password
      POSTGRES_DB: your-db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "your-user", "-d", "your-db", "-h", "localhost"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - backend-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend-network
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - backend-network
    restart: always

  test:
    build:
      context: ./backend  # Assuming your test file is within the backend project
    environment:
      - DB_HOST=database
      - DB_USER=your-user
      - DB_PASSWORD=your-password
      - DB_NAME=your-db
    command: npm test  # Run tests after the container starts
    depends_on:
      - backend
      - database
    networks:
      - backend-network

volumes:
  postgres_data:

networks:
  backend-network:
    driver: bridge
